[package]
name = "lfs-rs"
version = "0.3.8"
authors = [
  "Jason White <rust@jasonwhite.io>",
  "The Believer Company <believeross@believer.gg>",
]
edition = "2021"
description = """
A high-performance, caching Git LFS server with an AWS S3 back-end.
"""
documentation = "https://github.com/believer-oss/lfs-rs"
homepage = "https://github.com/believer-oss/lfs-rs"
repository = "https://github.com/believer-oss/lfs-rs"
readme = "README.md"
keywords = ["git-lfs", "s3"]
categories = ["command-line-utilities"]
license = "MIT"

[dependencies]
askama = "0.12"
async-stream = "0.3"
async-trait = "0.1"
aws-config = { version = "1.5" }
aws-sdk-dynamodb = { version = "1.56", optional = true }
aws-sdk-s3 = { version = "1.66", features = ["rt-tokio"] }
aws-smithy-types = { version = "1.2" }
aws-smithy-http = "0.60"
backoff = { version = "0.4", features = ["tokio"] }
bytes = "1"
chacha = "0.4"
chrono = "0.4"
derive_more = { version = "2.0", features = ["display", "from"] }
futures = "0.3"
hex = "0.4"
http = "1.2"
http-body-util = "0.1"
human-size = "0.4"
humansize = "2"
humantime = "2"
hyper = { version = "1.5", features = ["full"] }
hyper-util = { version = "0.1", features = ["full"] }
hyper-tls = { version = "0.6", features = ["vendored"] }
tower = { version = "0.5", features = ["util"] }
linked-hash-map = { version = "0.5", features = ["serde_impl"] }
rand = { version = "0.8", optional = true }
serde = { version = "1", features = ["derive"] }
serde_json = "1"
sha2 = "0.10"
clap = { version = "4.3", features = ["derive", "env"] }
tokio = { version = "1", features = ["full"] }
tokio-util = { version = "0.7", features = ["full"] }
url = "2"
uuid = { version = "1.11", features = ["v4"] }
anyhow = "1.0"
thiserror = "2.0"
redis = { version = "0.28", optional = true, features = ["aio", "tokio-comp"] }
base64 = { version = "0.22" }
parking_lot = { version = "0.12" }

opentelemetry = { version = "0.27", optional = true }
opentelemetry_sdk = { version = "0.27", features = [
  "rt-tokio",
], optional = true }
opentelemetry-otlp = { version = "0.27", features = [
  "http-proto",
  "tls",
  "tls-roots",
  "tokio",
  "tonic",
], optional = true }
opentelemetry-http = { version = "0.27", optional = true }
opentelemetry-appender-tracing = { version = "0.27", optional = true }
opentelemetry-semantic-conventions = { version = "0.27", optional = true }
tracing = { version = "0.1", features = ["attributes"] }
tracing-opentelemetry = { version = "0.32", optional = true }
tracing-log = { version = "0.2" }
tracing-subscriber = { version = "0.3", features = [
  "env-filter",
  "json",
  "registry",
] }
opentelemetry-stdout = "0.27"

[dev-dependencies]
rand = "0.8"
tempfile = "3"
duct = "0.13"
toml = "0.8"
wiremock = "0.6"

[features]
default = ["dynamodb", "otel"]
# If the "faulty" feature is enabled, random failures are injected into the byte
# stream.
faulty = ["rand"]
redis = ["dep:redis"]
dynamodb = ["dep:aws-sdk-dynamodb"]
otel = [
  "dep:opentelemetry",
  "dep:opentelemetry_sdk",
  "dep:opentelemetry-otlp",
  "dep:opentelemetry-http",
  "dep:opentelemetry-appender-tracing",
  "dep:opentelemetry-semantic-conventions",
  "dep:tracing-opentelemetry",
]
